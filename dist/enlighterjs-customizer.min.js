/*! EnlighterJS Theme Customizer 2.0.0 | Mozilla Public License 2.0 | https://enlighterjs.org */
var EnlighterJS_Customizer = (function (exports) {
    'use strict';

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2016-2020 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------

    /* eslint no-undef: 0 */
    var globals = {
      document: document,
      window: window
    }; // wrapper

    function getDocument() {
      return document;
    } // wrapper

    function getWindow() {
      return window;
    }

    // ----------------------------------------------------------------------

    function displayElement(el) {
      var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      el.style.display = visible === true ? 'block' : 'none';
    } // remove element

    function disposeElement(el) {
      el.parentNode.removeChild(el);
    } // get array of matched elements

    function getElements(selector) {
      return selector != null && selector.length > 0 ? getDocument().querySelectorAll(selector) : [];
    } // get first matched element

    function getElement(selector) {
      return selector != null && selector.length > 0 ? getDocument().querySelector(selector) : null;
    } // get data attribute

    function getElementDataAttribute(el, attb) {
      return el.getAttribute('data-' + attb) || null;
    } // get attribute

    function getElementAttribute(el, attb) {
      return el.getAttribute(attb) || null;
    } // add element before the original container

    function insertBefore(origin, element) {
      return origin.parentNode.insertBefore(element, origin);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _construct(Parent, args, Class) {
      if (isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct(Parent, args, Class) {
          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) _setPrototypeOf(instance, Class.prototype);
          return instance;
        };
      }

      return _construct.apply(null, arguments);
    }

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

        return arr2;
      }
    }

    function _iterableToArray(iter) {
      if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }

    function isClass(obj) {
      var s = obj.toString();
      return s.match(/_classCallCheck/) || s.match(/^class/);
    } // create dom node


    function createNode(element, attributes, content) {
      var _document = getDocument(); // create new dom element


      var el = _document.createElement(element); // inner content set ?


      if (content.length > 0) {
        // push nodes to parent element
        for (var i = 0; i < content.length; i++) {
          var node = content[i]; // valid element ?

          if (!node) {
            return;
          } // array ?


          if (node.push) {
            for (var j = 0; j < node.length; j++) {
              var node2 = node[j]; // standard dom node ?

              if (node2.appendChild) {
                el.appendChild(node2); // text node
              } else {
                el.appendChild(_document.createTextNode(node2));
              }
            } // standard dom node ?

          } else if (node.appendChild) {
            el.appendChild(node); // text node
          } else {
            el.appendChild(_document.createTextNode(node));
          }
        }
      } // utility function to add event listener


      function addEventListener(event, cb) {
        // register listener
        el.addEventListener(event, function (evt) {
          // disable defaults, disable propagation
          evt.preventDefault();
          evt.stopPropagation(); // bind this to event listener

          if (cb) {
            cb.apply(el, [evt, el]);
          }
        });
      } // set attributes
      // iterate over object properties


      for (var attbName in attributes) {
        // object property ?
        if (!Object.prototype.hasOwnProperty.call(attributes, attbName)) {
          continue;
        } // extract value


        var attbValue = attributes[attbName]; // event ?

        if (attbName.substr(0, 2) === 'on') {
          // ignore null events
          if (attbValue === null) {
            return;
          } // extract event type


          var type = attbName.substr(2).toLowerCase(); // register listener

          addEventListener(type, attbValue); // set attribute
        } else {
          // className set ? transform
          if (attbName === 'className') {
            attbName = 'class';
          }

          el.setAttribute(attbName, attbValue);
        }
      } // extend element


      el.on = addEventListener;
      return el;
    } // create a new dom element with given attributes / text / dom nodes

    function createElement(element, attributes) {
      for (var _len = arguments.length, content = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        content[_key - 2] = arguments[_key];
      }

      // is function ? passthrough
      if (typeof element === 'function') {
        // class or plain function
        if (isClass(element)) {
          // create instance an render it
          var i = _construct(element, [attributes || {}].concat(content));

          return i.render();
        } else {
          return element.apply(void 0, [attributes || {}].concat(content));
        } // new dom node based on string

      } else {
        return createNode(element, attributes, content);
      }
    }

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2016-2020 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    function renderComponent(stack) {
      var domTargetElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      // inject into target element ?
      if (domTargetElement !== null) {
        domTargetElement.appendChild(stack);
      }

      return stack;
    }

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2016-2020 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    // add class to element
    function addClass(element, name) {
      if (!element.classList.contains(name)) {
        element.classList.add(name);
      }
    } // remove class from element

    function removeClass(element, name) {
      if (element.classList.contains(name)) {
        element.classList.remove(name);
      }
    } // has class

    function hasClass(element, name) {
      return element.classList.contains(name);
    } // toggle element class

    function toggleClass(element, name) {
      if (element.classList.contains(name)) {
        element.classList.remove(name);
      } else {
        element.classList.add(name);
      }
    }

    // ----------------------------------------------------------------------

    var React = /*#__PURE__*/Object.freeze({
        __proto__: null,
        globals: globals,
        getDocument: getDocument,
        getWindow: getWindow,
        displayElement: displayElement,
        disposeElement: disposeElement,
        getElements: getElements,
        getElement: getElement,
        getElementDataAttribute: getElementDataAttribute,
        getElementAttribute: getElementAttribute,
        insertBefore: insertBefore,
        createNode: createNode,
        createElement: createElement,
        renderComponent: renderComponent,
        addClass: addClass,
        removeClass: removeClass,
        hasClass: hasClass,
        toggleClass: toggleClass
    });

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2020 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    // font styles
    var selectors = {
      container: '.enlighter-t-${THEME_NAME}',
      linenumbers: '.enlighter-t-${THEME_NAME}.enlighter-linenumbers div.enlighter>div::before',
      buttons: {
        generic: '.enlighter-t-${THEME_NAME} .enlighter-btn',
        codegroup: '.enlighter-t-${THEME_NAME}.enlighter-v-codegroup .enlighter-codegroup-switch .enlighter-btn'
      },
      token: '.enlighter-t-${THEME_NAME} .enlighter-'
    };

    function Container(props) {
      // css classes
      var classes = []; // name set ?

      if (props.name) {
        classes.push('enlighter-' + props.name);
      } // additional classnames set ?


      if (props.className) {
        // string input ?
        if (typeof props.className === 'string') {
          classes.push(props.className); // array input
        } else {
          classes.push.apply(classes, _toConsumableArray(props.className));
        }
      } // use createElement directly to expand the children!


      for (var _len = arguments.length, children = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        children[_key - 1] = arguments[_key];
      }

      return createElement.apply(React, ['div', {
        className: classes.join(' ')
      }].concat(children));
    }

    var Group =
    /*#__PURE__*/
    function () {
      function Group(props) {
        _classCallCheck(this, Group);

        this.props = props;

        for (var _len = arguments.length, children = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          children[_key - 1] = arguments[_key];
        }

        this.children = children;
      }

      _createClass(Group, [{
        key: "render",
        value: function render() {
          return createElement(Container, null, createElement("h3", null, this.props.title), this.children);
        }
      }]);

      return Group;
    }();

    // ----------------------------------------------------------------------

    function FormSelect(props) {
      var el = null;

      var onChangeEvent = function onChangeEvent() {
        props.onChange(el.value);
      }; // create select element


      el = createElement("select", {
        name: props.name,
        className: props.className,
        onChange: onChangeEvent
      }, props.options.map(function (opt) {
        if (props.value === opt.value) {
          return createElement("option", {
            selected: "selected",
            value: opt.value
          }, opt.label);
        } else {
          return createElement("option", {
            value: opt.value
          }, opt.label);
        }
      }), ";"); // initial trigger

      if (props.onChange) {
        props.onChange.apply(el, [props.value || (props.options ? props.options[0].value : null)]);
      }

      return el;
    }

    // global _ruleset
    // selector => [] rules
    var _ruleset = {}; // update handler

    var _evtHandlers = []; // retrieve global _ruleset

    function renderStylesheet(name) {
      // output buffer
      var buffer = '';

      for (var selector in _ruleset) {
        // add selector
        buffer += '\n' + selector.replace('${THEME_NAME}', name) + '{\n'; // add rules

        for (var rule in _ruleset[selector]) {
          // get value; strip whitespaces
          var value = (_ruleset[selector][rule] + "").trim(); // value set ?

          if (value && value.length > 0) {
            buffer += '\t' + rule + ': ' + _ruleset[selector][rule] + ';\n';
          }
        } // close block


        buffer += '}';
      }

      return buffer;
    }
    function updateRules(selector) {
      var rules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // selector set ?
      if (!selector) {
        throw new Error('selector not set');
      } // _ruleset available for given selector ?


      if (!_ruleset[selector]) {
        _ruleset[selector] = {};
      } // merge rules


      Object.assign(_ruleset[selector], rules); // call update handler

      _evtHandlers.forEach(function (fn) {
        fn.apply(fn);
      });
    } // register new update handler

    function onUpdate(fn) {
      // add function to stack
      _evtHandlers.push(fn);
    }

    // This Source Code Form is subject to the terms of the Mozilla Public
    var _options = [{
      label: "default",
      value: ''
    }, {
      label: "Source Code Pro",
      value: '"Source Code Pro", "Liberation Mono", "Courier New", Courier, monospace'
    }, {
      label: "Consolas",
      value: '"Consolas", "Source Code Pro", "Liberation Mono", "Courier New", Courier, monospace'
    }, {
      label: "Inconsolata",
      value: '"Inconsolata", "Consolas", "Source Code Pro", "Liberation Mono", "Courier New", Courier, monospace'
    }, {
      label: "Open Sans",
      value: '"Open Sans", Arial, Verdana, sans-serif'
    }]; // wrap child elements into div container

    function FontFamily(props) {
      function setCSS(v) {
        updateRules(props.selector, {
          'font-family': v
        });
      } // select element


      return createElement(FormSelect, {
        options: _options,
        onChange: setCSS,
        value: ""
      });
    }

    // This Source Code Form is subject to the terms of the Mozilla Public
    var _options$1 = [{
      label: "default",
      value: ""
    }, {
      label: "normal",
      value: "normal"
    }, {
      label: "italic",
      value: "italic"
    }, {
      label: "overline",
      value: "overline"
    }, {
      label: "underline",
      value: "underline"
    }, {
      label: "line through",
      value: "line-through"
    }]; // wrap child elements into div container

    function FontStyle(props) {
      function setCSS(v) {
        updateRules(props.selector, {
          'font-style': v
        });
      } // select element


      return createElement(FormSelect, {
        options: _options$1,
        onChange: setCSS,
        value: ""
      });
    }

    // This Source Code Form is subject to the terms of the Mozilla Public
    var _options$2 = [{
      label: "default",
      value: ""
    }, {
      label: "normal",
      value: "normal"
    }, {
      label: "bold",
      value: "bold"
    }, {
      label: "bolder",
      value: "bolder"
    }, {
      label: "lighter",
      value: "lighter"
    }, {
      label: "100",
      value: 100
    }, {
      label: "200",
      value: 200
    }, {
      label: "300",
      value: 300
    }, {
      label: "400",
      value: 400
    }, {
      label: "500",
      value: 500
    }, {
      label: "600",
      value: 600
    }, {
      label: "700",
      value: 700
    }, {
      label: "800",
      value: 800
    }, {
      label: "900",
      value: 900
    }]; // wrap child elements into div container

    function FontWeight(props) {
      function setCSS(v) {
        updateRules(props.selector, {
          'font-weight': v
        });
      } // select element


      return createElement(FormSelect, {
        options: _options$2,
        onChange: setCSS,
        value: ""
      });
    }

    // ----------------------------------------------------------------------

    function FormColor(props) {
      var el = null;

      var onChangeEvent = function onChangeEvent() {
        props.onChange(el.value);
      }; // create select element


      el = createElement("input", {
        name: props.name,
        className: props.className,
        onInput: onChangeEvent,
        type: "color"
      }); // initial trigger

      if (props.onChange) {
        props.onChange.apply(el, [props.value]);
      }

      return el;
    }

    // This Source Code Form is subject to the terms of the Mozilla Public

    function FontColor(props) {
      function setCSS(v) {
        updateRules(props.selector, {
          'color': v
        });
      } // select element


      return createElement(FormColor, {
        onChange: setCSS,
        value: ""
      });
    }

    // ----------------------------------------------------------------------

    function FormInput(props) {
      var el = null;

      var onChangeEvent = function onChangeEvent() {
        props.onChange(el.value);
      }; // create select element


      el = createElement("input", {
        name: props.name,
        className: props.className,
        onInput: onChangeEvent,
        type: "text"
      }); // initial trigger

      if (props.onChange) {
        props.onChange.apply(el, [props.value]);
      }

      return el;
    }

    // This Source Code Form is subject to the terms of the Mozilla Public

    function FontSize(props) {
      function setCSS(v) {
        updateRules(props.selector, {
          'font-size': v
        });
      } // select element


      return createElement(FormInput, {
        onChange: setCSS,
        value: ""
      });
    }

    // This Source Code Form is subject to the terms of the Mozilla Public

    function FontLineHeight(props) {
      function setCSS(v) {
        updateRules(props.selector, {
          'line-height': v
        });
      } // select element


      return createElement(FormInput, {
        onChange: setCSS,
        value: ""
      });
    }

    // ----------------------------------------------------------------------
    function FontView() {
      return createElement(Container, {
        className: "ejs-customizer-fonts"
      }, createElement(Group, {
        title: "Global"
      }, createElement(FontFamily, {
        selector: selectors.container
      }), createElement(FontStyle, {
        selector: selectors.container
      }), createElement(FontWeight, {
        selector: selectors.container
      }), createElement(FontColor, {
        selector: selectors.container
      }), createElement(FontSize, {
        selector: selectors.container
      }), createElement(FontLineHeight, {
        selector: selectors.container
      })), createElement(Group, {
        title: "Line numbers"
      }, createElement(FontFamily, {
        selector: selectors.linenumbers
      }), createElement(FontStyle, {
        selector: selectors.linenumbers
      }), createElement(FontWeight, {
        selector: selectors.linenumbers
      }), createElement(FontColor, {
        selector: selectors.linenumbers
      }), createElement(FontSize, {
        selector: selectors.linenumbers
      })), createElement(Group, {
        title: "Generic buttons"
      }, createElement(FontFamily, {
        selector: selectors.buttons.generic
      }), createElement(FontStyle, {
        selector: selectors.buttons.generic
      }), createElement(FontWeight, {
        selector: selectors.buttons.generic
      }), createElement(FontColor, {
        selector: selectors.buttons.generic
      }), createElement(FontSize, {
        selector: selectors.buttons.generic
      })), createElement(Group, {
        title: "Codegroup buttons"
      }, createElement(FontFamily, {
        selector: selectors.buttons.codegroup
      }), createElement(FontStyle, {
        selector: selectors.buttons.codegroup
      }), createElement(FontWeight, {
        selector: selectors.buttons.codegroup
      }), createElement(FontColor, {
        selector: selectors.buttons.codegroup
      }), createElement(FontSize, {
        selector: selectors.buttons.codegroup
      })));
    }

    // This Source Code Form is subject to the terms of the Mozilla Public

    function BackgroundColor(props) {
      function setCSS(v) {
        updateRules(props.selector, {
          'background-color': v
        });
      } // select element


      return createElement(FormColor, {
        onChange: setCSS,
        value: ""
      });
    }

    // ----------------------------------------------------------------------

    function Token(props) {
      // generator selector
      var selector = selectors.token + props.type;
      return createElement(Group, {
        title: props.name
      }, createElement(FontStyle, {
        selector: selector
      }), createElement(FontWeight, {
        selector: selector
      }), createElement(FontSize, {
        selector: selector
      }), createElement(FontColor, {
        selector: selector
      }), createElement(BackgroundColor, {
        selector: selector
      }));
    }

    function TokenView() {
      return createElement(Container, {
        className: "ejs-customizer-tokens"
      }, createElement("h2", null, "Comments"), createElement(Token, {
        type: "c0",
        name: "Single Line Comments/General"
      }), createElement(Token, {
        type: "c1",
        name: "Multi Line Block Comments"
      }), createElement(Token, {
        type: "c2",
        name: "Multi Line Doc Comments"
      }), createElement(Token, {
        type: "c9",
        name: "Special Comment Syntax"
      }), createElement("h2", null, "Keywords"), createElement(Token, {
        type: "k0",
        name: "Global Keywords"
      }), createElement(Token, {
        type: "k1",
        name: "Control Structure Keywords"
      }), createElement(Token, {
        type: "k2",
        name: "Variable/Type Initialization Keyword"
      }), createElement(Token, {
        type: "k3",
        name: "Operators"
      }), createElement(Token, {
        type: "k4",
        name: "Directives"
      }), createElement(Token, {
        type: "k5",
        name: "Types"
      }), createElement(Token, {
        type: "k6",
        name: "Labels/Symbols"
      }), createElement(Token, {
        type: "k7",
        name: "Variable"
      }), createElement(Token, {
        type: "k8",
        name: "Type Qualifiers/Modifier"
      }), createElement(Token, {
        type: "k9",
        name: "Special Keywords"
      }), createElement(Token, {
        type: "k10",
        name: "Namespaces"
      }), createElement("h2", null, "Expressions/Literals"), createElement(Token, {
        type: "e0",
        name: "Boolean Expressions"
      }), createElement(Token, {
        type: "e1",
        name: "Null Expressions"
      }), createElement(Token, {
        type: "e2",
        name: "Regular Expressions"
      }), createElement(Token, {
        type: "e3",
        name: "Constants"
      }), createElement(Token, {
        type: "e4",
        name: "Shell/Command Expression"
      }), createElement("h2", null, "Strings"), createElement(Token, {
        type: "s0",
        name: "General Strings"
      }), createElement(Token, {
        type: "s1",
        name: "Characters"
      }), createElement(Token, {
        type: "s2",
        name: "Template Strings"
      }), createElement(Token, {
        type: "s3",
        name: "Template String Delimiter"
      }), createElement(Token, {
        type: "s4",
        name: "String Escape Sequences"
      }), createElement(Token, {
        type: "s5",
        name: "Multi Line Strings"
      }), createElement("h2", null, "Numbers"), createElement(Token, {
        type: "n0",
        name: "Floats/General Numbers"
      }), createElement(Token, {
        type: "n1",
        name: "Integers"
      }), createElement(Token, {
        type: "n2",
        name: "Hexadecimal"
      }), createElement(Token, {
        type: "n3",
        name: "Binary"
      }), createElement(Token, {
        type: "n4",
        name: "Octal"
      }), createElement(Token, {
        type: "n5",
        name: "Complex/Imaginary Numbers"
      }), createElement("h2", null, "Methods/Functions"), createElement(Token, {
        type: "m0",
        name: "General/Global Function Calls"
      }), createElement(Token, {
        type: "m1",
        name: "General/Dynamic Method Calls"
      }), createElement(Token, {
        type: "m2",
        name: "Static Method Calls"
      }), createElement(Token, {
        type: "m3",
        name: "Properties"
      }), createElement("h2", null, "Generic"), createElement(Token, {
        type: "g0",
        name: "Generic Symbols"
      }), createElement(Token, {
        type: "g1",
        name: "Brackets"
      }), createElement("h2", null, "Language Specific"), createElement(Token, {
        type: "x1",
        name: "XML Tag"
      }), createElement(Token, {
        type: "x2",
        name: "XML Attribute"
      }), createElement(Token, {
        type: "x10",
        name: "CSS ID Selector"
      }), createElement(Token, {
        type: "x11",
        name: "CSS Class Selector"
      }), createElement(Token, {
        type: "x12",
        name: "CSS Rule/Property"
      }), createElement(Token, {
        type: "x13",
        name: "CSS Units"
      }), createElement(Token, {
        type: "x14",
        name: "CSS Hex Colors"
      }), createElement(Token, {
        type: "x15",
        name: "CSS Pseudo Elements/Selectors"
      }), createElement("h2", null, "Text Documents"), createElement(Token, {
        type: "t0",
        name: "Metadata"
      }), createElement(Token, {
        type: "t1",
        name: "Heading"
      }), createElement(Token, {
        type: "t2",
        name: "Section"
      }), createElement(Token, {
        type: "t3",
        name: "Hyperlink"
      }), createElement(Token, {
        type: "t4",
        name: "Emphasis/Formatting"
      }), createElement(Token, {
        type: "t5",
        name: "OK/Positive (e.g. diff+)"
      }), createElement(Token, {
        type: "t6",
        name: "Failure/Negative (e.g. diff-)"
      }), createElement(Token, {
        type: "t7",
        name: "Quotes/Blockquotes"
      }), createElement(Token, {
        type: "t8",
        name: "Code (not highlighted)"
      }));
    }

    // This Source Code Form is subject to the terms of the Mozilla Public
    // it just works in case of enlighterjs themes!

    function parseStyles(styles) {
      // remove comments
      var rawCSS = styles.replace(/\/\*[\s\S]*?\*\//g, ''); // split into blocks
      // remove empty blocks

      var blocks = rawCSS.split(/[}]/).map(function (str) {
        // remove whitespaces
        return str.trim();
      }).filter(String); // extract selectors

      var rulesets = blocks.map(function (b) {
        var parts = b.split('{');
        var selector = parts[0].trim();
        var rawRules = parts[1].split(';'); // rules cache

        var rules = {}; // process rules

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = rawRules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var rule = _step.value;
            var p2 = rule.split(':');
            rules[p2[0]] = p2[1];
          } // wrap into container

        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return {
          selector: selector,
          rules: rules
        };
      });
      return rulesets;
    } // sort rulesets regarding the theme


    function sortThemes(rulesets) {
      // buffer
      var themes = {}; // iterate over ruleset

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = rulesets[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var ruleset = _step2.value;
          // theme related selector ?
          var m = ruleset.selector.match(/(^|\s)\.enlighter-t-(\w+)($|\s)/); // match found ?

          if (m !== null) {
            // extract theme name
            var name = m[2]; // theme key in buffer ?

            if (!themes[name]) {
              themes[name] = {};
            } // assign selector


            themes[name][ruleset.selector] = ruleset.rules;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return themes;
    }

    var url = '/enlighterjs.min.css';
    function parseStylesheet() {
      getWindow().fetch(url).then(function (response) {
        return response.text();
      }).then(function (data) {
        console.time();
        console.log(sortThemes(parseStyles(data)));
        console.timeEnd();
      });
    }

    // ----------------------------------------------------------------------

    var version = '2.0.0'; // enlighter a single element/codegroup

    function init() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      try {
        // render font settings
        renderComponent(FontView(), getElement(options.fonts)); // render token settings

        renderComponent(TokenView(), getElement(options.tokens)); // handle css updates

        onUpdate(function () {
          getElement('#output').textContent = renderStylesheet('xxx');
        });
        parseStylesheet(); // ok

        return true; // Global Error Handling (FATAL ERRORS)
      } catch (err) {
        /* eslint no-console: 0 */
        console.error('EnlighterJS Customizer Internal Error:', err);
        return false;
      }
    } // render the css

    function render() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return renderStylesheet(name || 'custom');
    }

    exports.init = init;
    exports.render = render;
    exports.version = version;

    return exports;

}({}));
