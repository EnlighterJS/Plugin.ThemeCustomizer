/*! EnlighterJS Theme Customizer 2.0.0 | Mozilla Public License 2.0 | https://enlighterjs.org */
var EnlighterJS_Customizer = (function (exports) {
    'use strict';

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2016-2020 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------

    /* eslint no-undef: 0 */
    var globals = {
      document: document,
      window: window
    }; // wrapper

    function getDocument() {
      return document;
    } // wrapper

    function getWindow() {
      return window;
    }

    // ----------------------------------------------------------------------

    function displayElement(el) {
      var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      el.style.display = visible === true ? 'block' : 'none';
    } // remove element

    function disposeElement(el) {
      el.parentNode.removeChild(el);
    } // get array of matched elements

    function getElements(selector) {
      return selector != null && selector.length > 0 ? getDocument().querySelectorAll(selector) : [];
    } // get first matched element

    function getElement(selector) {
      return selector != null && selector.length > 0 ? getDocument().querySelector(selector) : null;
    } // get data attribute

    function getElementDataAttribute(el, attb) {
      return el.getAttribute('data-' + attb) || null;
    } // get attribute

    function getElementAttribute(el, attb) {
      return el.getAttribute(attb) || null;
    } // add element before the original container

    function insertBefore(origin, element) {
      return origin.parentNode.insertBefore(element, origin);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _construct(Parent, args, Class) {
      if (isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct(Parent, args, Class) {
          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) _setPrototypeOf(instance, Class.prototype);
          return instance;
        };
      }

      return _construct.apply(null, arguments);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (typeof call === "object" || typeof call === "function")) {
        return call;
      }

      return _assertThisInitialized(self);
    }

    function _superPropBase(object, property) {
      while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = _getPrototypeOf(object);
        if (object === null) break;
      }

      return object;
    }

    function _get(target, property, receiver) {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
      } else {
        _get = function _get(target, property, receiver) {
          var base = _superPropBase(target, property);

          if (!base) return;
          var desc = Object.getOwnPropertyDescriptor(base, property);

          if (desc.get) {
            return desc.get.call(receiver);
          }

          return desc.value;
        };
      }

      return _get(target, property, receiver || target);
    }

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

        return arr2;
      }
    }

    function _iterableToArray(iter) {
      if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }

    function isClass(obj) {
      var s = obj.toString();
      return s.match(/_classCallCheck/) || s.match(/^class/);
    } // create dom node


    function createNode(element, attributes, content) {
      var _document = getDocument(); // create new dom element


      var el = _document.createElement(element); // inner content set ?


      if (content.length > 0) {
        // push nodes to parent element
        for (var i = 0; i < content.length; i++) {
          var node = content[i]; // valid element ?

          if (!node) {
            return;
          } // array ?


          if (node.push) {
            for (var j = 0; j < node.length; j++) {
              var node2 = node[j]; // standard dom node ?

              if (node2.appendChild) {
                el.appendChild(node2); // text node
              } else {
                el.appendChild(_document.createTextNode(node2));
              }
            } // standard dom node ?

          } else if (node.appendChild) {
            el.appendChild(node); // text node
          } else {
            el.appendChild(_document.createTextNode(node));
          }
        }
      } // utility function to add event listener


      function addEventListener(event, cb) {
        // register listener
        el.addEventListener(event, function (evt) {
          // disable defaults, disable propagation
          evt.preventDefault();
          evt.stopPropagation(); // bind this to event listener

          if (cb) {
            cb.apply(el, [evt, el]);
          }
        });
      } // set attributes
      // iterate over object properties


      for (var attbName in attributes) {
        // object property ?
        if (!Object.prototype.hasOwnProperty.call(attributes, attbName)) {
          continue;
        } // extract value


        var attbValue = attributes[attbName]; // event ?

        if (attbName.substr(0, 2) === 'on') {
          // ignore null events
          if (attbValue === null) {
            return;
          } // extract event type


          var type = attbName.substr(2).toLowerCase(); // register listener

          addEventListener(type, attbValue); // set attribute
        } else {
          // className set ? transform
          if (attbName === 'className') {
            attbName = 'class';
          }

          el.setAttribute(attbName, attbValue);
        }
      } // extend element


      el.on = addEventListener;
      return el;
    } // create a new dom element with given attributes / text / dom nodes

    function createElement(element, attributes) {
      for (var _len = arguments.length, content = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        content[_key - 2] = arguments[_key];
      }

      // is function ? passthrough
      if (typeof element === 'function') {
        // class or plain function
        if (isClass(element)) {
          // create instance an render it
          var i = _construct(element, [attributes || {}].concat(content));

          return i.render();
        } else {
          return element.apply(void 0, [attributes || {}].concat(content));
        } // new dom node based on string

      } else {
        return createNode(element, attributes, content);
      }
    }

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2016-2020 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    function renderComponent(stack) {
      var domTargetElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      // inject into target element ?
      if (domTargetElement !== null) {
        domTargetElement.appendChild(stack);
      }

      return stack;
    }

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2016-2020 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    // add class to element
    function addClass(element, name) {
      if (!element.classList.contains(name)) {
        element.classList.add(name);
      }
    } // remove class from element

    function removeClass(element, name) {
      if (element.classList.contains(name)) {
        element.classList.remove(name);
      }
    } // has class

    function hasClass(element, name) {
      return element.classList.contains(name);
    } // toggle element class

    function toggleClass(element, name) {
      if (element.classList.contains(name)) {
        element.classList.remove(name);
      } else {
        element.classList.add(name);
      }
    }

    // ----------------------------------------------------------------------

    var React = /*#__PURE__*/Object.freeze({
        __proto__: null,
        globals: globals,
        getDocument: getDocument,
        getWindow: getWindow,
        displayElement: displayElement,
        disposeElement: disposeElement,
        getElements: getElements,
        getElement: getElement,
        getElementDataAttribute: getElementDataAttribute,
        getElementAttribute: getElementAttribute,
        insertBefore: insertBefore,
        createNode: createNode,
        createElement: createElement,
        renderComponent: renderComponent,
        addClass: addClass,
        removeClass: removeClass,
        hasClass: hasClass,
        toggleClass: toggleClass
    });

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2020 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    // font styles
    var selectors = {
      container: '.enlighter-t-${THEME_NAME}',
      linenumbers: '.enlighter-t-${THEME_NAME}.enlighter-linenumbers div.enlighter>div::before',
      buttons: {
        generic: '.enlighter-t-${THEME_NAME} .enlighter-btn',
        codegroup: '.enlighter-t-${THEME_NAME}.enlighter-v-codegroup .enlighter-codegroup-switch .enlighter-btn'
      },
      token: '.enlighter-t-${THEME_NAME} .enlighter-'
    };

    function Container(props) {
      // css classes
      var classes = []; // name set ?

      if (props.name) {
        classes.push('enlighter-' + props.name);
      } // additional classnames set ?


      if (props.className) {
        // string input ?
        if (typeof props.className === 'string') {
          classes.push(props.className); // array input
        } else {
          classes.push.apply(classes, _toConsumableArray(props.className));
        }
      } // use createElement directly to expand the children!


      for (var _len = arguments.length, children = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        children[_key - 1] = arguments[_key];
      }

      return createElement.apply(React, ['div', {
        className: classes.join(' ')
      }].concat(children));
    }

    var Group =
    /*#__PURE__*/
    function () {
      function Group(props) {
        _classCallCheck(this, Group);

        this.props = props;

        for (var _len = arguments.length, children = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          children[_key - 1] = arguments[_key];
        }

        this.children = children;
      }

      _createClass(Group, [{
        key: "render",
        value: function render() {
          return createElement(Container, null, createElement("h4", null, this.props.title), this.children);
        }
      }]);

      return Group;
    }();

    // ----------------------------------------------------------------------
    // it just works in for of enlighterjs themes!

    function parseStyles(styles) {
      // remove comments
      var rawCSS = styles.replace(/\/\*[\s\S]*?\*\//g, ''); // split into blocks
      // remove empty blocks

      var blocks = rawCSS.split(/[}]/).map(function (str) {
        // remove whitespaces
        return str.trim();
      }).filter(String); // extract selectors

      var rulesets = blocks.map(function (b) {
        var parts = b.split('{');
        var selector = parts[0].trim();
        var rawRules = parts[1].split(';'); // rules cache

        var rules = {}; // process rules

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = rawRules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var rule = _step.value;
            var p2 = rule.trim().split(':');

            if (p2.length > 1) {
              rules[p2[0].trim()] = p2[1].trim();
            }
          } // wrap into container

        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return {
          selector: selector,
          rules: rules
        };
      });
      return rulesets;
    } // sort rulesets regarding the theme


    function sortThemes(rulesets) {
      // buffer
      var themes = {}; // iterate over ruleset

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = rulesets[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var ruleset = _step2.value;
          // theme related selector ?
          var m = ruleset.selector.match(/(^|\s)\.enlighter-t-(\w+)($|\W)/); // match found ?

          if (m !== null) {
            // modify selector to generic one
            var selector = ruleset.selector.replace(/\.enlighter-t-(\w+)/, '.enlighter-t-${THEME_NAME}'); // extract theme name

            var name = m[2]; // theme key in buffer ?

            if (!themes[name]) {
              themes[name] = {};
            } // assign selector


            themes[name][selector] = ruleset.rules;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return themes;
    } // parse stylesheet


    function parseInterchangeableStylesheet(input) {
      // base-theme directive found ?
      var m = input.match(/@BASETHEME:(\w+)/);
      var basetheme = m !== null ? m[1] : null; // parse

      var themes = sortThemes(parseStyles(input)); // get first theme

      var ruleset = themes[Object.keys(themes)[0]];
      return {
        theme: basetheme,
        rules: ruleset
      };
    } // load and parse stylesheet

    function parseRemoteStylesheet(url, fn) {
      getWindow().fetch(url).then(function (response) {
        if (response.status === 200) {
          return response;
        } else {
          throw new Error(response.statusText);
        }
      }) // to text
      .then(function (response) {
        return response.text();
      }) // parse
      .then(function (data) {
        try {
          fn(false, sortThemes(parseStyles(data)));
        } catch (e) {
          fn(e);
        }
      }).catch(function (e) {
        fn(e);
      });
    }

    // ----------------------------------------------------------------------

    var _components = []; // cached ruleset

    var _componentRuleset = {}; // customized rules previously created

    var _customizedRuleset = {}; // event stack

    var updateEvents = []; // internal list of base themes

    var baseThemes = {};
    var baseTheme = 'enlighter';

    function fireUpdate() {
      // call hooks
      updateEvents.forEach(function (fn) {
        fn.apply(fn);
      });
    }

    function getComponentRuleset() {
      return _componentRuleset;
    }

    function updateComponentRules(selector) {
      var rules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // selector set ?
      if (!selector) {
        throw new Error('selector not set');
      } // _ruleset available for given selector ?


      if (!_componentRuleset[selector]) {
        _componentRuleset[selector] = {};
      } // merge rules


      Object.assign(_componentRuleset[selector], rules);
    } // register new component


    function registerComponent(component) {
      // push to stack
      _components.push(component);
    } // component update trigger (passthrough from components onInput/onChange)

    function updateComponent(selector, component) {
      // update rules for specific component
      updateComponentRules(selector, component.getRules());
      fireUpdate();
    } // register update hook

    function onUpdate(fn) {
      // push to stack
      updateEvents.push(fn);
    } // store base themes

    function registerBaseThemes(rulesets) {
      baseThemes = rulesets;
    } // get theme names based on keys

    function getBaseThemeList() {
      return Object.keys(baseThemes);
    }
    function setBaseTheme(theme) {
      baseTheme = theme;
      fireUpdate();
    }
    function getBaseTheme() {
      return baseTheme;
    }
    function getBaseThemeRules() {
      return baseThemes[baseTheme];
    }
    function applyRulesToComponents(ruleset) {
      // iterate over components
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var component = _step.value;
          // reset component (set value to empty)
          component.reset(); // component selector exists in ruleset ?

          if (ruleset[component.selector]) {
            component.applyRules(ruleset[component.selector]);
          } // store new rules


          updateComponentRules(component.selector, component.getRules());
        } // call hooks

      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      fireUpdate();
    } // load settings from base theme

    function applyBaseTheme() {
      // theme exists ?
      if (!baseThemes[baseTheme]) {
        throw new Error("base theme ".concat(baseTheme, " doesn't exist"));
      } // apply theme styles to all components


      applyRulesToComponents(baseThemes[baseTheme]);
    } // load settings from a previously generated theme

    function loadCustomizedTheme(content) {
      // try to parse existing stylesheet (previously create by customizer)
      var stylesheet = parseInterchangeableStylesheet(content); // rules available ?

      if (Object.keys(stylesheet.rules).length === 0) {
        return false;
      } // set new base theme name


      setBaseTheme(stylesheet.theme); // apply theme styles to all components

      _customizedRuleset = stylesheet.rules;
      return _customizedRuleset;
    }

    var Component =
    /*#__PURE__*/
    function () {
      function Component(props) {
        _classCallCheck(this, Component);

        this.props = props;
        this.selector = props.selector;
        this.el = null;
        this.value = null;
        this.cssProperty = null; // register component to manager

        registerComponent(this);
      } // component state change


      _createClass(Component, [{
        key: "onChange",
        value: function onChange(v) {
          // store value
          this.value = v; // forward update event

          updateComponent(this.selector, this);
        }
      }, {
        key: "reset",
        value: function reset() {
          this.value = '';
          this.el.value = '';
        } // @override
        // eslint-disable-next-line class-methods-use-this

      }, {
        key: "render",
        value: function render() {}
      }, {
        key: "getRules",
        value: function getRules() {
          if (!this.cssProperty) {
            return {};
          }

          return _defineProperty({}, this.cssProperty, this.value);
        }
      }, {
        key: "applyRules",
        value: function applyRules(rules) {
          // background available ?
          if (!rules[this.cssProperty]) {
            return;
          } // set internal value


          this.value = rules[this.cssProperty]; // update element state

          this.el.value = this.value;
        }
      }]);

      return Component;
    }();

    // ----------------------------------------------------------------------

    function FormSelect(props) {
      var el = null;

      var onChangeEvent = function onChangeEvent() {
        props.onChange(el.value);
      }; // create select element


      el = createElement("select", {
        name: props.name,
        className: props.className,
        onChange: onChangeEvent
      }, props.options.map(function (opt) {
        if (props.value === opt.value) {
          return createElement("option", {
            selected: "selected",
            value: opt.value
          }, opt.label);
        } else {
          return createElement("option", {
            value: opt.value
          }, opt.label);
        }
      }), ";"); // initial trigger

      if (props.onChange) {
        props.onChange.apply(el, [props.value || (props.options ? props.options[0].value : null)]);
      }

      return el;
    }

    var _options = [{
      label: "default",
      value: ''
    }, {
      label: "Source Code Pro",
      value: '"Source Code Pro","Liberation Mono","Courier New",Courier,monospace'
    }, {
      label: "Consolas",
      value: 'Consolas,"Source Code Pro","Liberation Mono","Courier New",Courier,monospace'
    }, {
      label: "Inconsolata",
      value: 'Inconsolata,Consolas,"Source Code Pro","Liberation Mono","Courier New",Courier,monospace'
    }, {
      label: "Open Sans",
      value: '"Open Sans",Arial,Verdana,sans-serif'
    }, {
      label: "Arial",
      value: 'Arial,Helvetica,sans-serif'
    }]; // wrap child elements into div container

    var FontFamily =
    /*#__PURE__*/
    function (_Component) {
      _inherits(FontFamily, _Component);

      function FontFamily(props) {
        var _this;

        _classCallCheck(this, FontFamily);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(FontFamily).call(this, props));
        _this.cssProperty = 'font-family';
        return _this;
      }

      _createClass(FontFamily, [{
        key: "applyRules",
        value: function applyRules(rules) {
          _get(_getPrototypeOf(FontFamily.prototype), "applyRules", this).call(this, rules);
        }
      }, {
        key: "reset",
        value: function reset() {
          this.value = _options[0].value;
          this.el.value = _options[0].value;
        }
      }, {
        key: "render",
        value: function render() {
          // create stateless dom element
          this.el = createElement(FormSelect, {
            options: _options,
            onChange: this.onChange.bind(this),
            value: this.value
          }); // return dom element

          return this.el;
        }
      }]);

      return FontFamily;
    }(Component);

    var _options$1 = [{
      label: "default",
      value: ""
    }, {
      label: "normal",
      value: "normal"
    }, {
      label: "italic",
      value: "italic"
    }, {
      label: "overline",
      value: "overline"
    }, {
      label: "underline",
      value: "underline"
    }, {
      label: "line through",
      value: "line-through"
    }]; // wrap child elements into div container

    var FontStyle =
    /*#__PURE__*/
    function (_Component) {
      _inherits(FontStyle, _Component);

      function FontStyle(props) {
        var _this;

        _classCallCheck(this, FontStyle);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(FontStyle).call(this, props));
        _this.cssProperty = 'font-style';
        return _this;
      }

      _createClass(FontStyle, [{
        key: "reset",
        value: function reset() {
          this.value = _options$1[0].value;
          this.el.value = _options$1[0].value;
        }
      }, {
        key: "render",
        value: function render() {
          // create stateless dom element
          this.el = createElement(FormSelect, {
            options: _options$1,
            onChange: this.onChange.bind(this),
            value: this.value
          }); // return dom element

          return this.el;
        }
      }]);

      return FontStyle;
    }(Component);

    var _options$2 = [{
      label: "default",
      value: ""
    }, {
      label: "normal",
      value: "normal"
    }, {
      label: "bold",
      value: "bold"
    }, {
      label: "bolder",
      value: "bolder"
    }, {
      label: "lighter",
      value: "lighter"
    }, {
      label: "100",
      value: 100
    }, {
      label: "200",
      value: 200
    }, {
      label: "300",
      value: 300
    }, {
      label: "400",
      value: 400
    }, {
      label: "500",
      value: 500
    }, {
      label: "600",
      value: 600
    }, {
      label: "700",
      value: 700
    }, {
      label: "800",
      value: 800
    }, {
      label: "900",
      value: 900
    }]; // wrap child elements into div container

    var FontWeight =
    /*#__PURE__*/
    function (_Component) {
      _inherits(FontWeight, _Component);

      function FontWeight(props) {
        var _this;

        _classCallCheck(this, FontWeight);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(FontWeight).call(this, props));
        _this.cssProperty = 'font-weight';
        return _this;
      }

      _createClass(FontWeight, [{
        key: "reset",
        value: function reset() {
          this.value = _options$2[0].value;
          this.el.value = _options$2[0].value;
        }
      }, {
        key: "render",
        value: function render() {
          // create stateless dom element
          this.el = createElement(FormSelect, {
            options: _options$2,
            onChange: this.onChange.bind(this),
            value: this.value
          }); // return dom element

          return this.el;
        }
      }]);

      return FontWeight;
    }(Component);

    // ----------------------------------------------------------------------

    function FormColor(props) {
      var el = null;

      var onChangeEvent = function onChangeEvent() {
        props.onChange(el.value);
      }; // create select element


      el = createElement("input", {
        name: props.name,
        className: props.className,
        onInput: onChangeEvent,
        type: "text"
      }); // initial trigger

      if (props.onChange) {
        props.onChange.apply(el, [props.value]);
      }

      return el;
    }

    var FontColor =
    /*#__PURE__*/
    function (_Component) {
      _inherits(FontColor, _Component);

      function FontColor(props) {
        var _this;

        _classCallCheck(this, FontColor);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(FontColor).call(this, props));
        _this.cssProperty = 'color';
        return _this;
      }

      _createClass(FontColor, [{
        key: "render",
        value: function render() {
          // create stateless dom element
          this.el = createElement(FormColor, {
            onChange: this.onChange.bind(this),
            value: this.value
          }); // return dom element

          return this.el;
        }
      }]);

      return FontColor;
    }(Component);

    // ----------------------------------------------------------------------

    function FormInput(props) {
      var el = null;

      var onChangeEvent = function onChangeEvent() {
        props.onChange(el.value);
      }; // create select element


      el = createElement("input", {
        name: props.name,
        className: props.className,
        onInput: onChangeEvent,
        type: "text"
      }); // initial trigger

      if (props.onChange) {
        props.onChange.apply(el, [props.value]);
      }

      return el;
    }

    var FontSize =
    /*#__PURE__*/
    function (_Component) {
      _inherits(FontSize, _Component);

      function FontSize(props) {
        var _this;

        _classCallCheck(this, FontSize);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(FontSize).call(this, props));
        _this.cssProperty = 'font-size';
        return _this;
      }

      _createClass(FontSize, [{
        key: "render",
        value: function render() {
          // create stateless dom element
          this.el = createElement(FormInput, {
            onChange: this.onChange.bind(this),
            value: this.value
          }); // return dom element

          return this.el;
        }
      }]);

      return FontSize;
    }(Component);

    var FontLineHeight =
    /*#__PURE__*/
    function (_Component) {
      _inherits(FontLineHeight, _Component);

      function FontLineHeight(props) {
        var _this;

        _classCallCheck(this, FontLineHeight);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(FontLineHeight).call(this, props));
        _this.cssProperty = 'line-height';
        return _this;
      }

      _createClass(FontLineHeight, [{
        key: "render",
        value: function render() {
          // create stateless dom element
          this.el = createElement(FormInput, {
            onChange: this.onChange.bind(this),
            value: this.value
          }); // return dom element

          return this.el;
        }
      }]);

      return FontLineHeight;
    }(Component);

    // ----------------------------------------------------------------------
    function FontView() {
      return createElement(Container, {
        className: "ejs-customizer-fonts"
      }, createElement(Group, {
        title: "Global"
      }, createElement(FontFamily, {
        selector: selectors.container
      }), createElement(FontStyle, {
        selector: selectors.container
      }), createElement(FontWeight, {
        selector: selectors.container
      }), createElement(FontColor, {
        selector: selectors.container
      }), createElement(FontSize, {
        selector: selectors.container
      }), createElement(FontLineHeight, {
        selector: selectors.container
      })), createElement(Group, {
        title: "Line numbers"
      }, createElement(FontFamily, {
        selector: selectors.linenumbers
      }), createElement(FontStyle, {
        selector: selectors.linenumbers
      }), createElement(FontWeight, {
        selector: selectors.linenumbers
      }), createElement(FontColor, {
        selector: selectors.linenumbers
      }), createElement(FontSize, {
        selector: selectors.linenumbers
      })), createElement(Group, {
        title: "Generic buttons"
      }, createElement(FontFamily, {
        selector: selectors.buttons.generic
      }), createElement(FontStyle, {
        selector: selectors.buttons.generic
      }), createElement(FontWeight, {
        selector: selectors.buttons.generic
      }), createElement(FontColor, {
        selector: selectors.buttons.generic
      }), createElement(FontSize, {
        selector: selectors.buttons.generic
      })), createElement(Group, {
        title: "Codegroup buttons"
      }, createElement(FontFamily, {
        selector: selectors.buttons.codegroup
      }), createElement(FontStyle, {
        selector: selectors.buttons.codegroup
      }), createElement(FontWeight, {
        selector: selectors.buttons.codegroup
      }), createElement(FontColor, {
        selector: selectors.buttons.codegroup
      }), createElement(FontSize, {
        selector: selectors.buttons.codegroup
      })));
    }

    var BackgroundColor =
    /*#__PURE__*/
    function (_Component) {
      _inherits(BackgroundColor, _Component);

      function BackgroundColor(props) {
        var _this;

        _classCallCheck(this, BackgroundColor);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(BackgroundColor).call(this, props));
        _this.cssProperty = 'background-color';
        return _this;
      }

      _createClass(BackgroundColor, [{
        key: "render",
        value: function render() {
          // create stateless dom element
          this.el = createElement(FormColor, {
            onChange: this.onChange.bind(this),
            value: this.value
          }); // return dom element

          return this.el;
        }
      }]);

      return BackgroundColor;
    }(Component);

    // ----------------------------------------------------------------------

    function Token(props) {
      // generator selector
      var selector = selectors.token + props.type;
      return createElement(Group, {
        title: props.name
      }, createElement(FontStyle, {
        selector: selector
      }), createElement(FontWeight, {
        selector: selector
      }), createElement(FontSize, {
        selector: selector
      }), createElement(FontColor, {
        selector: selector
      }), createElement(BackgroundColor, {
        selector: selector
      }));
    }

    function TokenView() {
      return createElement(Container, {
        className: "ejs-customizer-tokens"
      }, createElement("h2", null, "Comments"), createElement(Token, {
        type: "c0",
        name: "Single Line Comments/General"
      }), createElement(Token, {
        type: "c1",
        name: "Multi Line Block Comments"
      }), createElement(Token, {
        type: "c2",
        name: "Multi Line Doc Comments"
      }), createElement(Token, {
        type: "c9",
        name: "Special Comment Syntax"
      }), createElement("h2", null, "Keywords"), createElement(Token, {
        type: "k0",
        name: "Global Keywords"
      }), createElement(Token, {
        type: "k1",
        name: "Control Structure Keywords"
      }), createElement(Token, {
        type: "k2",
        name: "Variable/Type Initialization Keyword"
      }), createElement(Token, {
        type: "k3",
        name: "Operators"
      }), createElement(Token, {
        type: "k4",
        name: "Directives"
      }), createElement(Token, {
        type: "k5",
        name: "Types"
      }), createElement(Token, {
        type: "k6",
        name: "Labels/Symbols"
      }), createElement(Token, {
        type: "k7",
        name: "Variable"
      }), createElement(Token, {
        type: "k8",
        name: "Type Qualifiers/Modifier"
      }), createElement(Token, {
        type: "k9",
        name: "Special Keywords"
      }), createElement(Token, {
        type: "k10",
        name: "Namespaces"
      }), createElement("h2", null, "Expressions/Literals"), createElement(Token, {
        type: "e0",
        name: "Boolean Expressions"
      }), createElement(Token, {
        type: "e1",
        name: "Null Expressions"
      }), createElement(Token, {
        type: "e2",
        name: "Regular Expressions"
      }), createElement(Token, {
        type: "e3",
        name: "Constants"
      }), createElement(Token, {
        type: "e4",
        name: "Shell/Command Expression"
      }), createElement("h2", null, "Strings"), createElement(Token, {
        type: "s0",
        name: "General Strings"
      }), createElement(Token, {
        type: "s1",
        name: "Characters"
      }), createElement(Token, {
        type: "s2",
        name: "Template Strings"
      }), createElement(Token, {
        type: "s3",
        name: "Template String Delimiter"
      }), createElement(Token, {
        type: "s4",
        name: "String Escape Sequences"
      }), createElement(Token, {
        type: "s5",
        name: "Multi Line Strings"
      }), createElement("h2", null, "Numbers"), createElement(Token, {
        type: "n0",
        name: "Floats/General Numbers"
      }), createElement(Token, {
        type: "n1",
        name: "Integers"
      }), createElement(Token, {
        type: "n2",
        name: "Hexadecimal"
      }), createElement(Token, {
        type: "n3",
        name: "Binary"
      }), createElement(Token, {
        type: "n4",
        name: "Octal"
      }), createElement(Token, {
        type: "n5",
        name: "Complex/Imaginary Numbers"
      }), createElement("h2", null, "Methods/Functions"), createElement(Token, {
        type: "m0",
        name: "General/Global Function Calls"
      }), createElement(Token, {
        type: "m1",
        name: "General/Dynamic Method Calls"
      }), createElement(Token, {
        type: "m2",
        name: "Static Method Calls"
      }), createElement(Token, {
        type: "m3",
        name: "Properties"
      }), createElement("h2", null, "Generic"), createElement(Token, {
        type: "g0",
        name: "Generic Symbols"
      }), createElement(Token, {
        type: "g1",
        name: "Brackets"
      }), createElement("h2", null, "Language Specific"), createElement(Token, {
        type: "x1",
        name: "XML Tag"
      }), createElement(Token, {
        type: "x2",
        name: "XML Attribute"
      }), createElement(Token, {
        type: "x10",
        name: "CSS ID Selector"
      }), createElement(Token, {
        type: "x11",
        name: "CSS Class Selector"
      }), createElement(Token, {
        type: "x12",
        name: "CSS Rule/Property"
      }), createElement(Token, {
        type: "x13",
        name: "CSS Units"
      }), createElement(Token, {
        type: "x14",
        name: "CSS Hex Colors"
      }), createElement(Token, {
        type: "x15",
        name: "CSS Pseudo Elements/Selectors"
      }), createElement("h2", null, "Text Documents"), createElement(Token, {
        type: "t0",
        name: "Metadata"
      }), createElement(Token, {
        type: "t1",
        name: "Heading"
      }), createElement(Token, {
        type: "t2",
        name: "Section"
      }), createElement(Token, {
        type: "t3",
        name: "Hyperlink"
      }), createElement(Token, {
        type: "t4",
        name: "Emphasis/Formatting"
      }), createElement(Token, {
        type: "t5",
        name: "OK/Positive (e.g. diff+)"
      }), createElement(Token, {
        type: "t6",
        name: "Failure/Negative (e.g. diff-)"
      }), createElement(Token, {
        type: "t7",
        name: "Quotes/Blockquotes"
      }), createElement(Token, {
        type: "t8",
        name: "Code (not highlighted)"
      }));
    }

    var ThemeSelect =
    /*#__PURE__*/
    function () {
      // eslint-disable-next-line constructor-super
      function ThemeSelect(props) {
        _classCallCheck(this, ThemeSelect);

        this.el = null;
        this.onChange = props.onChange;
      }

      _createClass(ThemeSelect, [{
        key: "setValue",
        value: function setValue(v) {
          this.value = v;
          this.el.value = v;
        }
      }, {
        key: "render",
        value: function render() {
          // get theme list
          var themes = getBaseThemeList(); // create option list

          var options = themes.map(function (t) {
            return {
              'label': t,
              'value': t
            };
          }); // create stateless dom element

          this.el = createElement(FormSelect, {
            options: options,
            onChange: this.onChange,
            value: getBaseTheme()
          }); // return dom element

          return this.el;
        }
      }]);

      return ThemeSelect;
    }();

    // ----------------------------------------------------------------------

    function FormButton(props) {
      // create select element
      return createElement("button", {
        name: props.name,
        className: props.className,
        onClick: props.onClick,
        type: "button"
      }, props.label);
    }

    // ----------------------------------------------------------------------
    function SettingsView() {
      // eslint-disable-next-line class-methods-use-this
      function onChange(v) {
        setBaseTheme(v);
      }

      function load() {
        applyBaseTheme();
      }

      return createElement(Container, {
        className: "ejs-customizer-settings"
      }, createElement(Group, {
        title: "Base theme"
      }, createElement(ThemeSelect, {
        onChange: onChange
      }), createElement(FormButton, {
        label: "load base theme",
        onClick: load
      })));
    }

    // ----------------------------------------------------------------------
    // This Source Code Form is subject to the terms of the Mozilla Public
    // License, v. 2.0. If a copy of the MPL was not distributed with this
    // file, You can obtain one at http://mozilla.org/MPL/2.0/.
    // --
    // Copyright 2020 Andi Dittrich <https://andidittrich.de>
    // ----------------------------------------------------------------------
    // render css _ruleset
    function stringifyRules(name, baseTheme, ruleset) {
      // output buffer
      var buffer = '/*@BASETHEME:' + baseTheme + '*/\n';

      for (var selector in ruleset) {
        // add selector
        buffer += '\n' + selector.replace('${THEME_NAME}', name) + '{\n'; // add rules

        for (var rule in ruleset[selector]) {
          // get value; strip whitespaces
          var value = (ruleset[selector][rule] + "").trim(); // value set ?

          if (value && value.length > 0) {
            buffer += '\t' + rule + ': ' + ruleset[selector][rule] + ';\n';
          }
        } // close block


        buffer += '}';
      }

      return buffer;
    }

    // ----------------------------------------------------------------------
    function renderStylesheet(name) {
      // get generated ruleset
      var componentRuleset = getComponentRuleset(); // get base themes

      var baseTheme = getBaseThemeRules(); // merged ruleset

      var ruleset = {}; // copy base styles

      for (var selector in baseTheme) {
        ruleset[selector] = Object.assign({}, baseTheme[selector]);
      } // override with customized styles


      for (var _selector in componentRuleset) {
        // selector exists ? some styles may not exist in base theme!
        if (!ruleset[_selector]) {
          ruleset[_selector] = {};
        } // merge style
        // properties can be empty (not set by customizer)


        for (var prop in componentRuleset[_selector]) {
          var value = componentRuleset[_selector][prop]; // value set ?

          if (value.length > 0) {
            ruleset[_selector][prop] = value;
          }
        }
      } // ruleset to css string


      return stringifyRules(name, getBaseTheme(), ruleset);
    }

    // ----------------------------------------------------------------------

    var version = '2.0.0'; // enlighter a single element/codegroup

    function init() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      try {
        // load base styles
        parseRemoteStylesheet(options.themeURL, function (err, rulesets) {
          // error occured ?
          if (err) {
            console.error("failed to load+parse EnlighterJS themes", err);
            return false;
          } // show info


          console.log("EnlighterJS themes loaded: ", Object.keys(rulesets).join(', ')); // register+store base themes

          registerBaseThemes(rulesets); // try to parse existing theme

          var customizedRuleset = false;

          if (options.formExchange) {
            console.log("loading customized theme..");
            var content = getElement(options.formExchange).value; // try to load

            customizedRuleset = loadCustomizedTheme(content);

            if (customizedRuleset === false) {
              console.log("failed - no rules set");
            }
          } // render settings


          renderComponent(SettingsView(), getElement(options.settings)); // render font settings

          renderComponent(FontView(), getElement(options.fonts)); // render token settings

          renderComponent(TokenView(), getElement(options.tokens)); // initialize compoenents with loaded values

          if (customizedRuleset) {
            applyRulesToComponents(customizedRuleset); // trigger update

            getElement(options.formExchange).textContent = renderStylesheet(options.themeName);
          } // handle css updates


          onUpdate(function () {
            getElement(options.formExchange).textContent = renderStylesheet(options.themeName);
          });
        }); // Global Error Handling (FATAL ERRORS)
      } catch (err) {
        /* eslint no-console: 0 */
        console.error('EnlighterJS Customizer Internal Error:', err);
        return false;
      }
    } // render the css

    function render() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return renderStylesheet(name || 'custom');
    }

    exports.init = init;
    exports.render = render;
    exports.version = version;

    return exports;

}({}));
